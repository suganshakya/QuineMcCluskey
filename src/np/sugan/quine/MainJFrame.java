/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package np.sugan.quine;

import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;


/**
 *
 * @author SuganShakya
 */
public class MainJFrame extends javax.swing.JFrame {
    
    public static int NLITERAL;
    
    //private int nVariable;
    private int[] mintermArray;
    private int [] dontCareArray;
    //private ArrayList<Section> sectionList;
    private String finalExpression;
    //private PrimeImplicant p;
    
    private Section[][] sections;
    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {        
        //;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        oneTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        dontCareTextField = new javax.swing.JTextField();
        computeButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1.setText("Quine McCluskey Algorithm ( Tabulation Method)");

        jLabel3.setText("Enter the minterms for '1' : ");

        oneTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneTextFieldActionPerformed(evt);
            }
        });

        jLabel4.setText("Enter the minterm for 'X' (Don't cares) :");

        dontCareTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dontCareTextFieldActionPerformed(evt);
            }
        });

        computeButton.setText("Compute");
        computeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("The Boolean Expression is: ");

        resultTextArea.setColumns(20);
        resultTextArea.setRows(5);
        jScrollPane1.setViewportView(resultTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addComponent(oneTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dontCareTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(computeButton)
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(oneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dontCareTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(computeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void computeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeButtonActionPerformed
        // TODO add your handling code here:        
        readValues();
        System.out.println("\nThe minterm arrays:");
        for( int i = 0; i<mintermArray.length; i++)
            System.out.printf(" %d ",mintermArray[i]);
        
        System.out.println("\nThe don't care minterm arrays:");
        for( int i = 0; i<dontCareArray.length; i++)
            System.out.printf(" %d ",dontCareArray[i]);
                   
        action();                                 
    }//GEN-LAST:event_computeButtonActionPerformed

    private void action(){
        /** I
         * Initialise the Tables holds the sections
         */
        for(int nTable = 0; nTable< NLITERAL + 1; nTable++){
            sections[nTable] = new Section[NLITERAL+1-nTable];            
        }
        // For Table #0
        for (int nSection = 0; nSection < NLITERAL+1; nSection++)
            sections[0][nSection]=new Section(nSection);    // Section x = no. of 1 is x
        
        /**
         * Create the first table, with section with single Minterm implicants
         */
        System.out.println ("\nCreating Table #0 and its sections:");      
        for (int i:mintermArray){
            //Create the one element array whose element equals to its minterm.
            int [] temp = new int []{i};
            Implicant impl = new Implicant(temp);
            // Allocate the implicant into the section 
            // categorised by the number of 1 in its binray representation
            sections[0][impl.getBitCount()].addImplicant(impl);            
        }
        // Don't care Array may or may not be empty.
        if(dontCareArray.length!=0){
            for (int i:dontCareArray){
                int [] temp = new int []{i};
                Implicant impl = new Implicant(temp);
                sections[0][impl.getBitCount()].addImplicant(impl);            
            }
        }
        //System.out.println (" Table #0 : \n");      
        for (Section sec:sections[0]){
            sec.print();
        }
        
        // Table #0 has been created
        
        // Create Higher Tables #1 to Table #NLITERAL                
        for (int nTable = 1; nTable <NLITERAL+1; nTable++)   // Should be <=
            for (int nSection = 0; nSection < NLITERAL - nTable; nSection ++)
                sections[nTable][nSection]=new Section(nSection);
        
        /**
         * The next double for loop prepares the all the possible sections. 
         */
        for (int nTable = 1; nTable <NLITERAL; nTable++){   // 
            for (int nSection = 0; nSection < NLITERAL - nTable +1; nSection ++){
                //sections[nTable][nSection]=new Section(nSection);
                // System.out.printf("\n Table # %d, Section # %d: Being Created", 
                //        nTable, nSection);
                if (sections[nTable-1][nSection+1].getnOne()
                        - sections[nTable-1][nSection].getnOne() == 1){
                    sections[nTable][nSection]=
                        sections[nTable-1][nSection].
                                combine(sections[nTable-1][nSection+1]);
                    //sections[nTable][nSection].print();
                }
            }
            
        }
        
        System.out.println ("\nCreating Table 0 and its section Completed. ");
        
        System.out.println ("Calculation Starts ! \n");
        
        // For the Selection of Minterm, 
        // we user only minterm without dont care minerm.
        PrimeImplicant p = new PrimeImplicant(mintermArray);
        ArrayList<Implicant> checkedImp = new ArrayList<>();
        for (int nTable = 0; nTable <NLITERAL; nTable++){   // Should be <=
            System.out.printf("Table %d:", nTable);
            for (int nSection = 0; nSection < NLITERAL - nTable +1; nSection ++){
                //System.out.printf("Section %d: \n", nSection);
                sections[nTable][nSection].print();
                checkedImp = sections[nTable][nSection].getCheckedImplicants();
                if (!checkedImp.isEmpty()){
                    for(Implicant i:checkedImp){
                        p.addImplicant(i);
                    }
                }
            }
        }
        p.print();
        
        p.buildFinalPrimeImplicant();        
        p.print();
        finalExpression = p.getFinalExpression();        
        resultTextArea.setText(finalExpression);
        
    }
    /**
     * Read the Minterm Arrays and Don't Care Arrays.
     */
    private void readValues (){
        // Read the number of variable        
        int maxValue = -1 ;         
        
        String minterms = oneTextField.getText();
        //System.out.println(minterms);
        //System.out.println("That was minterm arrays");
        if(minterms != null){
        //if(!minterms.equals("")){
            String[] mintermStringArray = 
                    minterms.replaceAll("^[,\\s]+", "").split("[,\\s+]+");
            int nMinterm = mintermStringArray.length;
            mintermArray = new int[nMinterm];
            try {
                for(int i=0; i< mintermArray.length;++i){            
                    mintermArray[i]= Integer.parseInt(mintermStringArray[i]);
                    if(maxValue < mintermArray[i])
                        maxValue = mintermArray[i];                    
                }           
            } catch (NumberFormatException exp) {
                JOptionPane.showMessageDialog(this, 
                        "Enter an integer.", "Error",JOptionPane.ERROR_MESSAGE) ;
            }
            Arrays.sort(mintermArray);
        }
        /**
         * Now read the don't care minterms
         */
                
        String dontCares = dontCareTextField.getText();   
        
        if (dontCares.length()!=0){
            //System.out.printf("Dont Care array is not empty.");
            String[] dontCareStringArray = 
                    dontCares.replaceAll("^[,\\s]+", "").split("[,\\s+]+");
            int nDontCare = dontCareStringArray.length;
            dontCareArray = new int[nDontCare];
            try{
                for(int i=0; i< dontCareArray.length;++i){            
                    dontCareArray[i]= Integer.parseInt(dontCareStringArray[i]);
                    if(maxValue < dontCareArray[i])
                        maxValue = dontCareArray[i];
                    //System.out.printf("%d\n",dontCareArray[i]);
                }
            } catch (NumberFormatException exp) {
                JOptionPane.showMessageDialog(this, "Don't Care Array Empty! OR, Enter an integer.","Info.",JOptionPane.PLAIN_MESSAGE) ;
            }
            Arrays.sort(dontCareArray);
        }  
        
        else{
            System.out.printf("Dont Care array is empty.");
            dontCareArray=new int []{};
        }
                
        /**
         * NLITERAL represents the number of bits the expression will have
         * It depends on the value of maximum minterm
         * Example of NLITERAL : 4 --> A'BD 
         */
        NLITERAL = findExponent(maxValue); 
        sections = new Section[NLITERAL+1][];
    }
    
    private int findExponent(int x){
        if(x==0)
        	return 1;
        int i; 
		for (i = 0; x >= Math.pow(2,i); ++i)
            ;
        return i;
    }
    private void oneTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneTextFieldActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_oneTextFieldActionPerformed

    private void dontCareTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dontCareTextFieldActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_dontCareTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton computeButton;
    private javax.swing.JTextField dontCareTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField oneTextField;
    private javax.swing.JTextArea resultTextArea;
    // End of variables declaration//GEN-END:variables
}
